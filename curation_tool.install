<?php
/* 
 *    This file is part of curation_tool.

 *    curation_tool is free software: you can redistribute it and/or modify
 *    it under the terms of the Apache License, Version 2.0 (See License at the
 *    top of the directory).

 *    curation_tool is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 *    You should have received a copy of the Apache License, Version 2.0
 *    along with data_curation.  If not, see <http://www.apache.org/licenses/LICENSE-2.0.html>.
 */
  /**
   * Install function for curation tool.
   * 
   * @author Robert Olendorf
   * @license Apache License 2.0 
   */

/**
 * Implement hook_enable. Programatically creates roles and enables permissions
 * as a default. 
 */
function curation_tool_enable() {
  $oldvar = variable_get('user_register');
  variable_set('data_curation_old_user_register', $oldvar);
  variable_set('user_register', 1);
  variable_set('data_curation_repository_location', NULL);
  variable_set('data_curation_help_email', variable_get('site_mail'));
  
  // Create the database table(s)
  //drupal_install_schema('curation_tool');
    
  // Get the fields and field instances from the utility funcitons
  $fields = _custom_user_fields();
  $instances = _custom_user_instances();
  
  // create the fields and field instances for the modules
  foreach($fields as $fieldName => $field) {
    if(!field_info_field($fieldName)) {
      field_create_field($field);
      field_create_instance($instances[$fieldName]);
    }
  }
  
  // Roles needed for the curation tool
  $roleNames = array('curator', 'repository administrator');
  
  // Permissions for this module for each role
  $permissions = array(
      'repository administrator' => array(
          'administer curation tool',
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'curator' => array(
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'authenticated user' => array(
          'create own project',
          'delete own project',
          'edit own project',
      ),
  );
  
  // Create the roles.
  foreach($roleNames as $roleName) {
    // Checks if the role already exists to avoid stomping
    if(!user_role_load_by_name($roleName)) {
      $role = new stdClass();
      $role->name = $roleName;
      user_role_save($role);
      
      // Grant permissions to module specific roles
      $role = user_role_load_by_name($roleName);
      user_role_grant_permissions($role->rid, $permissions[$roleName]);
    }
  }
  
  // Grant permissions to authenticated users.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions['authenticated user']);
}

/**
 * Implement hook_disable. Removes roles and permissions used by the module. 
 */
function curation_tool_disable() {
  variable_set('user_register', variable_get('data_curation_old_user_register'));
  variable_del('data_curation_old_user_register');
  variable_del('data_curation_repository_location');
  
  // Remove the database table(s)
  drupal_uninstall_schema('curation_tool');
  
  // Remove custom fields from user profile
  foreach (_custom_user_fields() as $fieldName => $field) {
    field_delete_field($fieldName);
  }
  
  field_purge_batch(1000);
  
  // Roles needed for the curation tool
  $roleNames = array('repository administrator', 'curator');
  
  // Permissions for this module for each role
   $permissions = array(
      'repository administrator' => array(
          'administer curation tool',
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'curator' => array(
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'authenticated user' => array(
          'create own project',
          'delete own project',
          'edit own project',
      ),
  );
  
   // Revoke permissions then remove the role
  foreach($roleNames as $roleName) {
    $role = user_role_load_by_name($roleName);
    user_role_revoke_permissions($role->rid, $permissions[$roleName]);
    
    user_role_delete($roleName);
  }
  
  // Revoke any permissions for authenticated users.
  user_role_revoke_permissions(DRUPAL_AUTHENTICATED_RID, $permissions['authenticated user']);
}

/**
 * Implements hook_schema
 * @return array 
 */
function curation_tool_schema() {
  $schema['curation_tool'] = array(
      'description' => 'Stores basic information about existing data sets.',
      'fields' => array(
          'pid' => array(
              'description' => 'Primary key for a project',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'uid' => array(
              'description' => 'User ID of the owner of the project',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'name' => array(
              'description' => 'The short name for a project, typically the first directory name.',
              'type' => 'varchar',
              'length' => 64,
              'not null' => TRUE,
          ),
          'title' => array(
              'description' => 'Long title for the project, suitable for display',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
      ),
      'unique_keys' => array(
          'uid_name' => array('uid', 'name'),
      ),
      'primary key' => array('pid'),
  );
  
  return $schema;
}

/**
 * Just returns an array of the field data for all the custom fields. Makes the
 * code above much cleaner. 
 */
function _custom_user_fields() {
  $fields = array(
      'field_first_name' => array(
          'field_name' => 'field_first_name',
          'label' => t('First Name'),
          'type' => 'text',
          'cardinality' => 1,
          'settings' => array(
              'required' => TRUE,
              'max_length' => 64,
              ),
          ),
      'field_last_name' => array(
          'field_name' => 'field_last_name',
          'label' => t('Last Name'),
          'type' => 'text',
          'cardinality' => 1,
          'settings' => array(
              'required' => TRUE,
              'max_length' => 64,
              ),
          ),
      'field_department' => array(
          'field_name' => 'field_department',
          'label' => t('Department'),
          'type' => 'text',
          'cardinality' => 1,
          'settings' => array(
              'required' => TRUE,
              'max_length' => 128,
              ),
          ),
  );
  
  return $fields;
}

/**
 * Just returns an array of the instance data for all the custom fields. Makes the
 * code above much cleaner. 
 */
function _custom_user_instances() {
  $instances = array(
      'field_first_name' => array(
          'field_name' => 'field_first_name',
          'entity_type' => 'user',
          'label' => t('First Name'),
          'bundle' => 'user',
          'cardinality' => 1,
          'required' => TRUE,
          'widget' => array(
              'weight' => '-13',
              'type' => 'text_textfield',
              'settings' => array('size' => 60),
              ),
          'settings' => array(
              'text_processing' => '0',
              'user_register_form' => TRUE,
              ),
          ),
      'field_last_name' => array(
          'field_name' => 'field_last_name',
          'entity_type' => 'user',
          'label' => t('Last Name'),
          'bundle' => 'user',
          'cardinality' => 1,
          'required' => TRUE,
          'widget' => array(
              'weight' => '-12',
              'type' => 'text_textfield',
              'settings' => array('size' => 60),
              ),
          'settings' => array(
              'text_processing' => '0',
              'user_register_form' => TRUE,
              ),
          ),
      'field_department' => array(
          'field_name' => 'field_department',
          'entity_type' => 'user',
          'label' => t('Department'),
          'bundle' => 'user',
          'cardinality' => 1,
          'required' => TRUE,
          'widget' => array(
              'weight' => '-11',
              'type' => 'text_textfield',
              'settings' => array('size' => 60),
              ),
          'settings' => array(
              'text_processing' => '0',
              'user_register_form' => TRUE,
              ),
          ),
      );
  return $instances;
}
