<?php
  /**
   * Install function for curation tool.
   * 
   * @author Robert Olendorf
   * @license Apache License 2.0 
   */

/**
 * Implement hook_enable. Programatically creates roles and enables permissions
 * as a default. 
 */
function curation_tool_enable() {
  // Create the database table(s)
  drupal_install_schema('curation_tool');
  
  // Roles needed for the curation tool
  $roleNames = array('curator', 'repository administrator');
  
  // Permissions for this module for each role
  $permissions = array(
      'repository administrator' => array(
          'administer curation tool',
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'curator' => array(
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'authenticated user' => array(
          'create own project',
          'delete own project',
          'edit own project',
      ),
  );
  
  // Create the roles.
  foreach($roleNames as $roleName) {
    // Checks if the role already exists to avoid stomping
    if(!user_role_load_by_name($roleName)) {
      $role = new stdClass();
      $role->name = $roleName;
      user_role_save($role);
      
      // Grant permissions to module specific roles
      $role = user_role_load_by_name($roleName);
      user_role_grant_permissions($role->rid, $permissions[$roleName]);
    }
  }
  
  // Grant permissions to authenticated users.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $permissions['authenticated user']);
}

/**
 * Implement hook_disable. Removes roles and permissions used by the module. 
 */
function curation_tool_disable() {
  // Remove the database table(s)
  drupal_uninstall_schema('curation_tool');
  
  // Roles needed for the curation tool
  $roleNames = array('repository administrator', 'curator');
  
  // Permissions for this module for each role
   $permissions = array(
      'repository administrator' => array(
          'administer curation tool',
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'curator' => array(
          'create any project',
          'create own project',
          'delete any project',
          'delete own project',
          'edit any project',
          'edit own project',
      ),
      'authenticated user' => array(
          'create own project',
          'delete own project',
          'edit own project',
      ),
  );
  
   // Revoke permissions then remove the role
  foreach($roleNames as $roleName) {
    $role = user_role_load_by_name($roleName);
    user_role_revoke_permissions($role->rid, $permissions[$roleName]);
    
    user_role_delete($roleName);
  }
  
  // Revoke any permissions for authenticated users.
  user_role_revoke_permissions(DRUPAL_AUTHENTICATED_RID, $permissions['authenticated user']);
}

/**
 * Implements hook_schema
 * @return array 
 */
function curation_tool_schema() {
  $schema['curation_tool'] = array(
      'description' => 'Stores basic information about existing data sets.',
      'fields' => array(
          'pid' => array(
              'description' => 'Primary key for a project',
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'uid' => array(
              'description' => 'User ID of the owner of the project',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'name' => array(
              'description' => 'The short name for a project, typically the first directory name.',
              'type' => 'varchar',
              'length' => 64,
              'not null' => TRUE,
          ),
          'title' => array(
              'description' => 'Long title for the project, suitable for display',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
          ),
      ),
      'unique_keys' => array(
          'uid_name' => array('uid', 'name'),
      ),
      'primary key' => array('pid'),
  );
  
  return $schema;
}
?>